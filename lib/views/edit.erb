<style>
  #controls {
    background-color: #eee;
    float: left;
    width: 25%;
  }

  #drawing {
    float: left;
    width: 75%;
  }

  .flash {
    background-color: green;
  }
</style>
<div id='controls'>
  <p class='flash'></p>
  <% if flash = session.delete(:flash) %>
    <p class='flash'><%= flash %></p>
  <% end %>
  <p>
    <a href='/'>Drawings</a>
  </p>
  <p>
    Editing <%= @drawing.name %><br/>
  </p>
  <h3>Models</h3>
  <ul>
    <% @models.each do |model| %>
      <li>
        <a class='model' data-model-id='<%= model.id %>'/><%= model.name %></a>
      </li>
    <% end %>
  </ul>
  <form action='/drawings/<%= @drawing.id %>' method='post'>
    <input id=name name='name' value='<%= @drawing.name %>'/><br/>
    <input type='submit' name='Save'/>
  </form>
</div>
<div id='drawing'>
</div>
<script>
  // draw bounding box
  //
  var r = Raphael($('#drawing').offset().left, 0, 500, 500);
  r.rect(0, 0, 500, 500);

  // define available models
  //
  var models = {
    <% @models.each do |model| %>
      '<%= model.id %>': {id: '<%= model.id %>', name: '<%= model.name %>', relationships: []},
    <% end %>
  };

  // define relationships
  //
  var relationships = [
    <% @relationships.each do |relationship| %>
      {source_model_id: '<%= relationship.source.id %>', destination_model_id: '<%= relationship.destination.id %>', type: '<%= relationship[:type] %>'},
    <% end %>
  ];

  // wire up relationships
  //
  _.each(relationships, function(relationship) {
    relationship.source = models[relationship.source_model_id];
    relationship.destination = models[relationship.destination_model_id];
    relationship.source.relationships.push(relationship);
    relationship.destination.relationships.push(relationship);
  });

  function centerOf(element) {
    return [element.attr('x') + element.attr('width') / 2, element.attr('y') + element.attr('height') / 2];
  }

  function modelWidgetForModel(model) {
    return _.find(model_widgets, function(model_widget) {return model_widget.model == model});
  }

  function otherModel(model, relationship) {
    if (relationship.source == model) {
      return relationship.destination;
    }
    else {
      return relationship.source;
    }
  }

  function addRelationships(model_widget) {
    var srcCenter = centerOf(model_widget.graphic[0]);
    _.each(model_widget.model.relationships, function(relationship) {
      om = otherModel(model_widget.model, relationship);
      modelWidget = modelWidgetForModel(om);
      console.log(modelWidget);
      if (modelWidget) {
        var destCenter = centerOf(modelWidget.graphic[0]);
        path = r.path("M" + srcCenter[0] + ',' + srcCenter[1] + 'L' + destCenter[0] + ',' + destCenter[1])
      }
    });
  }

  function start(x, y, ev) {
      this.ox = this.attr('x');
      this.oy = this.attr('y');
  }

  function move(dx, dy, x, y, ev) {
      this.data('set').attr({
          x: this.ox + dx,
          y: this.oy + dy
      });
  }

  var model_widgets = [];
  var relationship_widgets = [];

  $('.model').click(function(ev) {
    console.log('Adding model with id ' + $(ev.target).attr('data-model-id'));

    model = models[$(ev.target).attr('data-model-id')];

    if (!_.any(model_widgets, function(model_widget) {return model_widget.model == model})) {
      model_widget = {
        model: model,
        x: 60,
        y: 40,
        graphic: r.set(
          r.rect(60, 40, 60, 40).attr({fill: 'white'}),
          r.text(60 + 30, 40 + 20, model.name)
        )
      };
      model_widget.graphic[0].data('set', model_widget.graphic)
      model_widget.graphic[0].drag(move, start);
      addRelationships(model_widget);

      model_widgets.push(model_widget);
    }
  });

  $('form').submit(function(ev) {
    ev.preventDefault();
    var data = {
      name: $('#name').val(),
      model_widgets: _.map(model_widgets, function(model_widget) { return {model_id: model_widget.model.id, x: model_widget.graphic[0].attr('x'), y: model_widget.graphic[0].attr('y')}})
    };
    console.log(data);
    $.post('/drawings/<%= @drawing.id %>', {drawing: JSON.stringify(data)}, function(data) {
      $('.flash').text('Saved!');
    });
  });

  // display drawing
  //
  $.get('/drawings/' + <%= @drawing.id %> + '.json', function(data) {
    _.each(data.model_widgets, function(mw) {
      model = models[mw.model_id];
      model_widget = {
        model: model,
        x: mw.x,
        y: mw.y,
        graphic: r.set(
          r.rect(mw.x, mw.y, 60, 40).attr({fill: 'white'}),
          r.text(mw.x + 30, mw.y + 20, model.name)
        )
      };
      model_widget.graphic[0].data('set', model_widget.graphic)
      model_widget.graphic[0].drag(move, start);
      addRelationships(model_widget);

      model_widgets.push(model_widget);
    });
  }, 'json')
  /*
  $(document).ready(function() {
    alert('hello');
  });
  */

/*
    var dragger = function () {
        this.ox = this.type == "rect" ? this.attr("x") : this.attr("cx");
        this.oy = this.type == "rect" ? this.attr("y") : this.attr("cy");
    },
        move = function (dx, dy) {
            var att = this.type == "rect" ? {x: this.ox + dx, y: this.oy + dy} : {cx: this.ox + dx, cy: this.oy + dy};
            this.attr(att);
            r.safari();
        },
        up = function () {
        };


    var widgets = [
      {name: 'Car', x: 10, y: 10},
      {name: 'Wheel', x: 200, y: 200}
    ];

    var relations = [
      {from: widgets[0], to: widgets[1]}
    ];

    for (var i = 0; i < widgets.length; i++) {
      var widget = widgets[i];
      rect = r.rect(widget.x, widget.y, 60, 40);
      r.text(widget.x + 30, widget.y + 20, widget.name);
      rect.drag(move, dragger, up);
    }

    for (var i = 0; i < relations.length; i++) {
      var relation = relations[i];
      r.path('M' + relation.from.x + ',' + relation.from.y + 'L' + relation.to.x + ',' + relation.to.y);
    }
*/

    /*
    // Creates circle at x = 50, y = 40, with radius 10
    // Sets the fill attribute of the circle to red (#f00)
    circle.attr("fill", "#f00");

    // Sets the stroke attribute of the circle to white
    circle.attr("stroke", "#fff");
    */

/*
    window.box_attrs = {x: 10, y: 20, width:10, height: 10};
    window.box = r.rect().attr(box_attrs);
    window.box.attr(box_attrs);

    path_attrs = [['M', 10, 10], ['L', 100, 100]];
    var path = r.path(path_attrs);
*/
</script>
